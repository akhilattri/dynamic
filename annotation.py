# -*- coding: utf-8 -*-
"""annotation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vrelJbTckz6FlVjneYZ_TZWfPnVIOPiM
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pandas
!pip install scikit-learn

import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB,CategoricalNB
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report

from sklearn.ensemble import VotingClassifier

path = "/content/drive/MyDrive/PROJECT_DIR/data/arc.csv"

path2="/content/drive/MyDrive/PROJECT_DIR/data/ant-1.7.csv"

csv_files = [file for file in os.listdir('/content/drive/MyDrive/PROJECT_DIR/data/') if file.endswith('.csv')]
dfs = {}  # Dictionary to store dataframes

for file in csv_files:
    df_name = file.split('.')[0]  # Extract dataframe name from file name
    file_path = '/content/drive/MyDrive/PROJECT_DIR/data/' + file
    dfs[df_name] = pd.read_csv(file_path)

# ######## print check ########
# for df_name, df in dfs.items():
#     print(f"DataFrame: {df_name}")
#     print(df.head())  # Display first few rows of each dataframe

"""data path: /content/drive/MyDrive/PROJECT_DIR/data/arc.csv"""

data = pd.read_csv(path2)

print(data.head())

# data_2=pd.read_csv(path2)

X = data.drop('bug', axis=1)  # Features
y = data['bug']  # Target variable

# from sklearn.preprocessing import MinMaxScaler

# scaler = MinMaxScaler()
# scaled_data = scaler.fit_transform(X)
# X = pd.DataFrame(scaled_data,
# 						columns=X.columns)
# X.head()

# y_log= pd.get_dummies(data['bug'], prefix='binary')
# y_log.head()

runMLP():
    MLP = MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', solver='adam', max_iter=1000, random_state=42)
    MLP.fit(x_train, y_train)
    y_pred = MLP.predict(x_test)
    print(classification_report(y_test, y_pred))
    # print(confusion_matrix(y_test, y_pred))

runNB():
    gnb=GaussianNB()
    cnb=CategoricalNB()

    gnb.fit(x_train,y_train)
    cnb.fit(x_train,y_train)

    y_gnb_pred=gnb.predict(x_test)
    # y_cnb_pred=cnb.predict(x_test)

    print(classification_report(y_test, y_gnb_pred))
    # print(classification_report(y_test, y_cnb_pred))

runRBF():
    rbf = SVC(kernel='rbf', random_state=423843)

    rbf.fit(x_train,y_train)

    y_rbf_pred=rbf.predict(x_test)

    print(classification_report(y_test, y_rbf_pred))

runLOG():
    lgr=LogisticRegression(random_state=0)

    lgr.fit(x_train,y_train)

def runDTree():
    dtree = DecisionTreeClassifier(random_state=42)

    dtree.fit(x_train, y_train)

    y_pred = dtree.predict(x_test)

    print(classification_report(y_test, y_pred))

def runVoting():
    gnb = GaussianNB()
    cnb = CategoricalNB()
    mlp = MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', solver='adam', max_iter=1000, random_state=42)

    estimators = [('gnb', gnb), ('cnb', cnb), ('mlp', mlp)]
    voting_clf = VotingClassifier(estimators=estimators, voting='hard')

    voting_clf.fit(x_train, y_train)

    y_pred = voting_clf.predict(x_test)

    print(classification_report(y_test, y_pred))

runVoting()

for df_name, df in dfs.items():
    # Perform operations on df or df_name
    print(f"DataFrame Name: {df_name}")
    print(df.head())  # Example operation: Display first few rows of each dataframe

    x = df.drop('bug', axis=1)  # Features
    y = df['bug']  # Target variable
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

    runMLP()
    runNB()
    runRBF()
    runLOG()
    runDTree()
    runVoting()